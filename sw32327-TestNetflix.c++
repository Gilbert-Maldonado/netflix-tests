#define TESTNETFLIX
#include <iostream> // cout, endl
#include <sstream>  // istringtstream, ostringstream
#include <string>   // string

#include "gtest/gtest.h"

#include "Netflix.h"

using namespace std;

string metacache = "00001 0000000 0000023\n00002 0000023 0000033\n00003 "
                   "0000033 0000061\n00004 0000061 0000065\n00005 0000065 "
                   "0000129\n00006 0000129 0000165\n00007 0000165 0000168\n";

string customercache = "0000006 3.42\n0000007 4.01\n0000008 4.21\n0000010 "
                       "3.39\n0000025 3.48\n0000033 3.75\n0000042 3.92\n"
                       "0000059 3.71\n0000079 3.55\n0000083 3.97\n0000087 "
                       "3.62\n0000094 3.42\n0000097 3.23\n0000116 4.19\n"
                       "0000126 4.67\n0000130 4.05\n0000131 3.18\n0000133 "
                       "3.33\n0000134 4.71\n0000142 3.33\n0000149 4.25\n"
                       "0000158 3.57\n0000164 3.98\n0000168 4.21\n0000169 "
                       "3.74\n0000177 3.34\n0000178 3.00\n0000183 3.69\n"
                       "0000188 3.42\n0000189 4.03\n0000192 3.51\n0000195 "
                       "3.63\n0000199 3.98\n0000201 3.63\n0000215 3.47\n"
                       "0000231 3.76\n0000242 2.70\n0000247 4.08\n0000248 "
                       "3.65\n0000250 3.45\n0000261 2.95\n0000265 3.69\n"
                       "0000266 4.10\n0000267 3.33\n0000268 4.31\n0000283 "
                       "3.47\n0000291 3.48\n0000296 3.37\n0000298 3.80\n"
                       "0000299 3.56\n0000301 4.06\n0000302 3.21\n0000304 "
                       "3.81\n0000305 4.10\n0000307 3.66\n0000308 3.43\n"
                       "0000310 4.35\n0000312 4.07\n0000314 3.73\n0000330 "
                       "3.73\n0000331 2.82\n0000333 3.74\n0000352 3.78\n"
                       "0000358 3.75\n0000363 4.33\n0000368 3.77\n0000369 "
                       "3.79\n0000379 3.59\n0000383 3.43\n0000384 3.43\n"
                       "0000385 3.10\n0000392 2.93\n0000413 3.44\n0000416 "
                       "4.83\n0000424 3.49\n0000437 2.65\n0000439 3.84\n"
                       "0000440 3.89\n0000442 4.06\n0000453 3.38\n0000462 "
                       "3.06\n0000466 3.95\n0000470 3.57\n0000471 3.31\n"
                       "0000477 3.42\n0000478 3.65\n0000479 4.64\n0000481 "
                       "4.32\n0000485 3.53\n0000490 5.00\n0000491 3.63\n"
                       "0000492 3.79\n0000495 4.64\n0000508 4.07\n0000515 "
                       "3.12\n0000517 3.44\n0000527 3.41\n0000529 4.22\n"
                       "0000536 4.28\n0000540 4.60\n0000544 3.18\n0000546 "
                       "3.31\n0000547 4.51\n0000550 3.79\n0000561 3.83\n"
                       "0000576 4.31\n0000578 4.06\n0000585 3.81\n0000592 "
                       "3.58\n0000596 3.98\n0000602 4.05\n0000609 3.81\n"
                       "0000614 3.76\n0000616 3.84\n0000623 3.62\n0000624 "
                       "4.00\n0000633 3.95\n0000657 3.58\n0000660 3.23\n"
                       "0000663 4.05\n0000664 3.60\n0000665 3.14\n0000682 "
                       "4.00\n0000684 4.09\n0000685 4.12\n0000688 4.46\n"
                       "0000692 3.33\n0000695 3.37\n0000711 3.79\n0000719 "
                       "4.18\n0000734 3.37\n0000735 3.96\n0000739 3.65\n"
                       "0000742 3.84\n0000744 3.21\n0000748 3.07\n0000750 "
                       "3.28\n0000756 2.39\n0000766 4.11\n0000767 4.02\n"
                       "0000769 3.11\n0000781 3.26\n0000784 4.19\n0000785 "
                       "3.68\n0000787 4.09\n0000788 3.33\n0000793 4.13\n"
                       "0000798 3.53\n0000815 3.46\n0000820 3.00\n0000825 "
                       "3.45\n0000828 3.60\n0000829 3.83\n0000834 3.35\n"
                       "0000840 3.13\n0000844 3.53\n0000857 3.60\n0000870 "
                       "4.13\n0000873 3.45\n0000877 3.57\n0000906 3.74\n"
                       "0000909 3.46\n0000911 3.15\n0000915 4.06\n0000920 "
                       "4.19\n0000921 4.39\n0000930 3.54\n";

const int customer_size = 168;

string moviecache = "00001 3.75\n00002 3.56\n00003 3.64\n00004 2.74\n00005 "
                    "3.92\n00006 3.08\n00007 2.13\n"
                    "00008 3.19\n00009 2.62\n00010 3.18\n00011 3.03\n00012 "
                    "3.42\n00013 4.55\n00014 3.03\n"
                    "00015 3.29\n00016 3.10\n00017 2.90\n00018 3.78\n00019 "
                    "3.32\n00020 3.15\n00021 3.46\n"
                    "00022 2.25\n00023 3.56\n00024 2.99\n00025 3.97\n00026 "
                    "2.79\n00027 3.53\n00028 3.82\n"
                    "00029 3.60\n00030 3.76\n00031 3.05\n00032 4.07\n00033 "
                    "4.17\n00034 2.71\n00035 3.15\n"
                    "00036 3.02\n00037 3.99\n00038 2.05\n00039 2.44\n00040 "
                    "2.92\n00041 1.63\n00042 2.33\n"
                    "00043 2.57\n00044 3.68\n00045 2.97\n00046 3.81\n00047 "
                    "3.27\n00048 3.71\n00049 3.67\n"
                    "00050 3.03\n00051 3.57\n00052 3.76\n00053 1.68\n00054 "
                    "2.99\n00055 3.02\n00056 3.65\n"
                    "00057 3.68\n00058 3.61\n00059 2.79\n00060 2.15\n00061 "
                    "2.95\n00062 3.62\n00063 3.25\n"
                    "00064 2.42\n00065 2.33\n00066 2.30\n00067 2.56\n00068 "
                    "4.14\n00069 3.29\n00070 2.73\n"
                    "00071 3.77\n00072 3.15\n00073 3.89\n00074 3.19\n00075 "
                    "2.57\n00076 4.09\n00077 2.85\n"
                    "00078 2.94\n00079 3.77\n00080 2.80\n00081 3.44\n00082 "
                    "3.04\n00083 3.73\n00084 3.22\n"
                    "00085 4.25\n00086 1.95\n00087 2.81\n00088 3.84\n00089 "
                    "2.69\n00090 3.50\n00091 3.90\n"
                    "00092 3.57\n00093 2.69\n00094 3.68\n00095 2.58\n00096 "
                    "3.37\n00097 3.87\n00098 3.92\n"
                    "00099 2.42\n00100 2.65\n00101 3.37\n00102 2.74\n00103 "
                    "3.66\n00104 3.70\n00105 3.13\n"
                    "00106 4.10\n00107 3.35\n00108 3.17\n00109 2.68\n00110 "
                    "3.03\n00111 3.08\n00112 3.00\n"
                    "00113 3.89\n00114 3.37\n00115 3.54\n00116 3.54\n00117 "
                    "3.46\n00118 3.43\n00119 2.70\n"
                    "00120 2.42\n00121 3.62\n00122 2.91\n00123 2.83\n00124 "
                    "2.27\n00125 3.37\n00126 3.20\n"
                    "00127 2.63\n00128 3.22\n00129 2.15\n00130 2.23\n00131 "
                    "2.70\n00132 3.07\n00133 3.74\n"
                    "00134 2.13\n00135 4.14\n00136 2.97\n00137 2.39\n00138 "
                    "3.94\n00139 2.51\n00140 2.53\n"
                    "00141 2.98\n00142 2.81\n00143 3.85\n00144 3.20\n00145 "
                    "3.07\n00146 2.42\n00147 2.17\n"
                    "00148 3.30\n00149 3.02\n00150 2.88\n00151 1.95\n00152 "
                    "3.93\n00153 2.75\n00154 2.94\n"
                    "00155 3.60\n00156 3.50\n00157 3.38\n00158 2.66\n00159 "
                    "3.93\n00160 3.01\n00161 3.85\n"
                    "00162 2.96\n00163 2.38\n00164 2.63\n00165 3.92\n00166 "
                    "3.56\n00167 4.09\n00168 3.24\n"
                    "00169 3.39\n00170 3.18\n00171 3.74\n00172 3.13\n00173 "
                    "3.54\n00174 3.32\n00175 4.00\n"
                    "00176 3.27\n00177 2.68\n00178 3.37\n00179 2.46\n00180 "
                    "3.83\n00181 2.60\n00182 3.08\n"
                    "00183 3.01\n00184 3.34\n00185 3.06\n00186 3.38\n00187 "
                    "3.01\n00188 2.76\n00189 3.35\n"
                    "00190 2.10\n00191 3.93\n00192 3.20\n00193 2.98\n00194 "
                    "3.13\n00195 3.30\n00196 3.47\n"
                    "00197 3.48\n00198 3.08\n00199 3.89\n00200 3.01\n00201 "
                    "3.42\n00202 3.10\n00203 3.16\n"
                    "00204 2.71\n00205 3.30\n00206 3.86\n00207 2.86\n00208 "
                    "3.36\n00209 4.16\n00210 3.15\n"
                    "00211 3.56\n00212 2.78\n00213 3.47\n00214 2.92\n00215 "
                    "4.06\n00216 3.22\n00217 2.95\n"
                    "00218 3.23\n00219 2.60\n00220 3.26\n00221 3.43\n00222 "
                    "2.61\n00223 4.21\n00224 3.83\n"
                    "00225 2.73\n00226 2.44\n00227 3.42\n00228 2.83\n00229 "
                    "3.83\n00230 3.10\n00231 2.94\n"
                    "00232 3.18\n00233 3.24\n00234 2.97\n00235 3.02\n00236 "
                    "2.32\n00237 3.40\n00238 3.68\n"
                    "00239 3.77\n00240 3.95\n00241 4.16\n00242 3.91\n00243 "
                    "3.03\n00244 3.87\n00245 2.78\n"
                    "00246 3.12\n00247 3.03\n00248 3.63\n00249 3.18\n00250 "
                    "3.44\n00251 3.88\n00252 3.39\n"
                    "00253 4.07\n00254 2.04\n00255 3.14\n00256 3.44\n00257 "
                    "3.91\n00258 2.95\n00259 3.22\n"
                    "00260 3.16\n00261 3.69\n00262 3.71\n00263 3.98\n00264 "
                    "2.89\n00265 3.25\n00266 3.06\n"
                    "00267 3.69\n00268 3.71\n00269 3.76\n00270 4.29\n00271 "
                    "3.10\n00272 2.92\n00273 3.36\n"
                    "00274 2.77\n00275 3.63\n00276 2.08\n00277 3.45\n00278 "
                    "2.14\n00279 3.17\n00280 3.35\n"
                    "00281 3.76\n00282 3.67\n00283 3.71\n00284 2.26\n00285 "
                    "3.33\n00286 2.92\n00287 3.57\n"
                    "00288 3.55\n00289 2.33\n00290 3.58\n00291 2.22\n00292 "
                    "3.86\n00293 3.76\n00294 3.15\n"
                    "00295 3.31\n00296 2.91\n00297 2.88\n00298 3.10\n00299 "
                    "3.71\n00300 2.46\n00301 2.61\n"
                    "00302 2.82\n00303 3.09\n00304 3.77\n00305 3.62\n00306 "
                    "3.06\n00307 3.48\n00308 2.78\n"
                    "00309 3.08\n00310 3.36\n00311 3.58\n00312 3.71\n00313 "
                    "3.69\n00314 3.41\n00315 3.29\n"
                    "00316 4.30\n00317 3.00\n00318 2.34\n00319 3.03\n00320 "
                    "2.81\n00321 2.72\n00322 2.59\n"
                    "00323 2.42\n00324 3.06\n00325 4.20\n00326 3.29\n00327 "
                    "3.19\n00328 2.90\n00329 3.59\n"
                    "00330 3.46\n00331 3.62\n00332 2.26\n00333 3.79\n00334 "
                    "3.56\n00335 2.18\n00336 3.17\n"
                    "00337 2.97\n00338 3.89\n00339 3.78\n00340 2.94\n00341 "
                    "3.05\n00342 3.70\n00343 3.17\n"
                    "00344 3.70\n00345 4.11\n00346 3.05\n00347 2.44\n00348 "
                    "3.41\n00349 2.47\n00350 3.80\n"
                    "00351 2.94\n00352 2.56\n00353 3.25\n00354 2.28\n00355 "
                    "2.00\n00356 3.07\n00357 3.51\n"
                    "00358 3.54\n00359 4.15\n00360 2.39\n00361 3.64\n00362 "
                    "2.51\n00363 2.95\n00364 2.93\n"
                    "00365 3.22\n00366 3.50\n00367 3.14\n00368 3.41\n00369 "
                    "2.86\n00370 3.11\n00371 3.87\n"
                    "00372 2.39\n00373 2.78\n00374 3.33\n00375 3.03\n00376 "
                    "3.42\n00377 2.54\n00378 2.84\n"
                    "00379 2.63\n00380 3.09\n00381 3.39\n00382 3.08\n00383 "
                    "2.74\n00384 3.74\n00385 3.63\n"
                    "00386 2.95\n00387 3.52\n00388 2.32\n00389 3.11\n00390 "
                    "2.69\n00391 3.54\n00392 3.23\n"
                    "00393 3.32\n00394 3.57\n00395 3.99\n00396 3.10\n00397 "
                    "3.93\n00398 2.75\n00399 2.34\n"
                    "00400 3.83\n00401 3.63\n00402 3.25\n00403 3.09\n00404 "
                    "2.49\n00405 3.75\n00406 3.76\n"
                    "00407 2.68\n00408 3.41\n00409 3.55\n00410 3.90\n00411 "
                    "2.92\n00412 3.13\n00413 3.41\n"
                    "00414 2.94\n00415 1.76\n00416 2.99\n00417 3.93\n00418 "
                    "2.73\n00419 3.91\n00420 3.71\n"
                    "00421 4.04\n00422 3.40\n00423 2.98\n00424 3.56\n00425 "
                    "3.67\n00426 3.25\n00427 2.87\n"
                    "00428 2.83\n00429 3.36\n00430 4.05\n00431 3.54\n00432 "
                    "3.99\n00433 3.56\n00434 3.48\n"
                    "00435 2.87\n00436 3.81\n00437 3.27\n00438 3.03\n00439 "
                    "3.22\n00440 2.93\n00441 3.77\n"
                    "00442 3.93\n00443 3.97\n00444 3.17\n00445 3.54\n00446 "
                    "2.84\n00447 3.42\n00448 3.20\n"
                    "00449 2.99\n00450 3.35\n00451 4.17\n00452 2.89\n00453 "
                    "3.55\n00454 3.93\n00455 3.79\n"
                    "00456 3.68\n00457 3.87\n00458 3.55\n00459 3.48\n00460 "
                    "2.19\n00461 3.47\n00462 4.04\n"
                    "00463 4.09\n00464 2.76\n00465 2.92\n00466 3.75\n00467 "
                    "3.56\n00468 3.52\n00469 2.78\n"
                    "00470 2.45\n00471 4.07\n00472 3.06\n00473 4.03\n00474 "
                    "3.60\n00475 3.00\n00476 4.13\n"
                    "00477 3.96\n00478 3.26\n00479 3.87\n00480 2.57\n00481 "
                    "3.10\n00482 3.79\n00483 3.45\n"
                    "00484 3.52\n00485 3.56\n00486 3.65\n00487 3.71\n00488 "
                    "3.66\n00489 3.55\n00490 2.87\n"
                    "00491 3.37\n00492 2.96\n00493 2.60\n00494 4.00\n00495 "
                    "3.10\n00496 3.71\n00497 3.48\n"
                    "00498 4.07\n00499 3.04\n00500 3.64\n00501 3.80\n00502 "
                    "3.70\n00503 3.62\n00504 4.06\n"
                    "00505 3.14\n00506 2.80\n00507 3.60\n00508 2.99\n00509 "
                    "2.47\n00510 3.24\n00511 2.78\n"
                    "00512 2.83\n00513 2.09\n00514 3.81\n00515 1.29\n00516 "
                    "3.78\n00517 3.48\n00518 3.80\n"
                    "00519 3.74\n00520 3.87\n00521 2.70\n00522 3.30\n00523 "
                    "3.03\n00524 3.28\n00525 2.03\n"
                    "00526 2.91\n00527 2.28\n00528 2.98\n00529 3.36\n00530 "
                    "2.43\n00531 3.14\n00532 3.28\n"
                    "00533 3.12\n00534 3.21\n00535 3.49\n00536 2.82\n00537 "
                    "3.50\n00538 2.74\n00539 3.85\n"
                    "00540 3.40\n00541 2.47\n00542 1.88\n00543 3.26\n00544 "
                    "3.65\n00545 3.48\n00546 2.60\n"
                    "00547 3.20\n00548 3.01\n00549 2.64\n00550 3.46\n00551 "
                    "3.28\n00552 3.01\n00553 3.18\n"
                    "00554 3.24\n00555 4.01\n00556 2.96\n00557 2.53\n00558 "
                    "3.27\n00559 3.55\n00560 4.19\n"
                    "00561 3.94\n00562 2.37\n00563 3.50\n00564 3.20\n00565 "
                    "3.25\n00566 3.08\n00567 2.82\n"
                    "00568 2.96\n00569 3.48\n00570 2.92\n00571 3.96\n00572 "
                    "3.24\n00573 3.29\n00574 3.19\n"
                    "00575 4.05\n00576 3.84\n00577 4.19\n00578 2.41\n00579 "
                    "3.98\n00580 3.08\n00581 3.31\n"
                    "00582 3.01\n00583 3.30\n00584 3.06\n00585 3.81\n00586 "
                    "3.32\n00587 3.77\n00588 3.45\n"
                    "00589 2.35\n00590 3.40\n00591 2.89\n00592 2.00\n00593 "
                    "2.73\n00594 2.56\n00595 4.17\n"
                    "00596 2.97\n00597 2.46\n00598 3.36\n00599 3.50\n00600 "
                    "3.22\n00601 3.32\n00602 2.81\n"
                    "00603 3.58\n00604 3.31\n00605 2.89\n00606 3.34\n00607 "
                    "3.54\n00608 2.41\n00609 3.76\n"
                    "00610 2.52\n00611 2.03\n00612 3.06\n00613 3.17\n00614 "
                    "3.08\n00615 3.50\n00616 3.32\n"
                    "00617 3.83\n00618 2.61\n00619 3.86\n00620 3.57\n00621 "
                    "3.93\n00622 2.98\n00623 3.04\n"
                    "00624 3.25\n00625 1.51\n00626 3.66\n00627 2.96\n00628 "
                    "3.51\n00629 3.57\n00630 2.63\n"
                    "00631 3.66\n00632 2.98\n00633 3.22\n00634 4.15\n00635 "
                    "2.65\n00636 3.50\n00637 3.50\n"
                    "00638 3.54\n00639 3.09\n00640 3.14\n00641 3.65\n00642 "
                    "3.72\n00643 3.15\n00644 2.99\n"
                    "00645 3.94\n00646 3.87\n00647 3.44\n00648 3.50\n00649 "
                    "3.01\n00650 2.68\n00651 2.94\n"
                    "00652 3.32\n00653 2.61\n00654 2.56\n00655 3.51\n00656 "
                    "2.74\n00657 4.05\n00658 3.63\n"
                    "00659 2.75\n00660 3.78\n00661 3.25\n00662 3.59\n00663 "
                    "4.17\n00664 2.34\n00665 2.70\n"
                    "00666 3.25\n00667 3.79\n00668 3.87\n00669 2.38\n00670 "
                    "3.51\n00671 3.22\n00672 3.07\n"
                    "00673 3.82\n00674 3.38\n00675 3.20\n00676 3.08\n00677 "
                    "3.74\n00678 3.33\n00679 3.06\n"
                    "00680 2.96\n00681 3.49\n00682 3.74\n00683 2.93\n00684 "
                    "2.61\n00685 3.40\n00686 3.07\n"
                    "00687 3.04\n00688 3.17\n00689 3.42\n00690 3.98\n00691 "
                    "2.99\n00692 3.51\n00693 3.06\n"
                    "00694 3.76\n00695 2.84\n00696 3.43\n00697 3.29\n00698 "
                    "2.49\n00699 3.83\n00700 3.61\n";

#define MOVIECACHESIZE 699
const int movie_size = 699;

// -----------------
// netflix_binsearch
// -----------------

TEST(NetflixFixture, binsearch_1) {
  istringstream stream(moviecache);
  ASSERT_EQ(netflix_binsearch(stream, MOVIELINE, 700, 0, movie_size), 3.61);
}

TEST(NetflixFixture, binsearch_2) {
  istringstream stream(moviecache);
  ASSERT_EQ(netflix_binsearch(stream, MOVIELINE, 1, 0, movie_size), 3.75);
}

TEST(NetflixFixture, binsearch_3) {
  istringstream stream(moviecache);
  ASSERT_EQ(netflix_binsearch(stream, MOVIELINE, 557, 0, movie_size), 2.53);
}

TEST(NetflixFixture, binsearch_4) {
  istringstream stream(customercache);
  ASSERT_EQ(netflix_binsearch(stream, USERLINE, 6, 0, customer_size), 3.42);
}

TEST(NetflixFixture, binsearch_5) {
  istringstream stream(customercache);
  ASSERT_EQ(netflix_binsearch(stream, USERLINE, 416, 0, customer_size), 4.83);
}

TEST(NetflixFixture, binsearch_6) {
  istringstream stream(customercache);
  ASSERT_EQ(netflix_binsearch(stream, USERLINE, 930, 0, customer_size), 3.54);
}

// ------------
// netflix_eval
// ------------

TEST(NetflixFixture, eval_1) {
  istringstream ucache(customercache);
  istringstream mcache(moviecache);
  double rating = netflix_eval(111, 416, mcache, ucache, customer_size);
  rating = abs((double)(rating - 5.0));
  ASSERT_TRUE(rating < 1);
}

TEST(NetflixFixture, eval_2) {
  istringstream ucache(customercache);
  istringstream mcache(moviecache);
  double rating = netflix_eval(18, 424, mcache, ucache, customer_size);
  rating = abs((double)(rating - 4.0));
  ASSERT_TRUE(rating < 1);
}

TEST(NetflixFixture, eval_3) {
  istringstream ucache(customercache);
  istringstream mcache(moviecache);
  double rating = netflix_eval(17, 911, mcache, ucache, customer_size);
  ostringstream stream;
  stream << rating;
  ASSERT_EQ(stream.str().length(), 3);
}

// -------------
// netflix_error
// -------------

TEST(NetflixFixture, error_1) {
  istringstream actual("2147047 5");
#ifdef OPT_Map
  netflix_hash(actual, 0, 1);
#endif
  ostringstream stream;
  stream << netflix_error(2147047, 2.0, actual, 2135, 2152);
  ASSERT_EQ(stream.str(), "9");
}

TEST(NetflixFixture, error_2) {
  istringstream actual("1149588 4");
#ifdef OPT_Map
  netflix_hash(actual, 0, 1);
#endif
  ostringstream stream;
  stream << netflix_error(1149588, 3.7, actual, 0, 23);
  ASSERT_EQ(stream.str(), "0.09");
}

TEST(NetflixFixture, error_3) {
  istringstream actual("1572159 5");
#ifdef OPT_Map
  netflix_hash(actual, 0, 1);
#endif
  ostringstream stream;
  stream << netflix_error(1572159, 1.1, actual, 815712, 815733);
  ASSERT_EQ(stream.str(), "15.21");
}

// ------------
// netflix_hash
// ------------

#ifdef OPT_Map
TEST(NetflixFixture, hash_1) {
  istringstream actual("1149588 4\n 123443 1\n 214325 3\n");
  // there is only one customer for movie 9999
  netflix_hash(actual, 0, 3);
  // if netflix_error returns 0, this mean the hash value is exactly correct
  ASSERT_EQ(netflix_error(123443, 1.0, actual, 0, 3), 0);
}

TEST(NetflixFixture, hash_2) {
  istringstream actual("1149588 4\n 123443 1\n 214325 3\n1354 3\n");
  netflix_hash(actual, 2, 4);
  // if netflix_error returns 0, this mean the hash value is exactly correct
  ASSERT_EQ(netflix_error(1354, 3.0, actual, 3, 4), 0);
}

TEST(NetflixFixture, hash_3) {
  istringstream actual("188 4\n 1243 2\n 214325 3\n1674 4\n1245 2\n3254 7");
  netflix_hash(actual, 1, 5);
  // if netflix_error returns 0, this mean the hash value is exactly correct
  ASSERT_EQ(netflix_error(1674, 4.0, actual, 2, 4), 0);
}
#endif

// ------------
// netflix_read
// ------------

TEST(NetflixFixture, read_1) {
  istringstream input("75414\n");
  int movie, customer, start, end;
  istringstream meta(metacache);
  istringstream actual(customercache);
  netflix_read(input, movie, customer, meta, actual, start, end, -2);
  ASSERT_EQ(customer, 75414);
}

TEST(NetflixFixture, read_2) {
  istringstream input("75414\n2647871\n1283744\n");
  int movie, customer, start, end;
  istringstream meta(metacache);
  istringstream actual(customercache);
  // if there isn't a new movie, movie should not change
  movie = 5;
  start = 65;
  end = 129;
  netflix_read(input, movie, customer, meta, actual, start, end, -2);
  ASSERT_EQ(movie, 5);
  ASSERT_EQ(customer, 75414);
}

TEST(NetflixFixture, read_3) {
  istringstream input("10:\n1952305\n1531863\n");
  int movie, customer, start, end;
  istringstream meta(metacache);
  istringstream actual(customercache);
  // if a new movie is encountered, it should overwrite the previous movie
  movie = 5;
  start = 65;
  end = 129;
  netflix_read(input, movie, customer, meta, actual, start, end, -2);
  ASSERT_EQ(movie, 10);
  ASSERT_EQ(customer, 1952305);
}

// -------------
// netflix_print
// -------------

TEST(NetflixFixture, print_1) {
  ostringstream out;
  int movie = 22;
  netflix_print(out, movie, movie, 2.2);
  ASSERT_EQ("2.2\n", out.str());
}

TEST(NetflixFixture, print_2) {
  ostringstream out;
  int movie = 3541;
  int last = 22;
  netflix_print(out, movie, last, 4.1);
  ASSERT_EQ("3541:\n4.1\n", out.str());
}

TEST(NetflixFixture, print_3) {
  ostringstream out;
  int movie = 3541;
  int last = 22;
  netflix_print(out, last, movie, 4.1);
  ASSERT_EQ("22:\n4.1\n", out.str());
}